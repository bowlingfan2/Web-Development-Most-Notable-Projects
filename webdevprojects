Project #1: Fashion Blog
index.html
<!DOCTYPE html>
<html>
  </html>
  <head>
    <title>Everyday with Isa</title>
    </head>
    <body>
      <img src="https://s3.amazonaws.com/codecademy-content/courses/learn-html/elements-and-structure/profile.jpg" />
      <h3>
        Isabelle Rodriguez | 1 day ago
        </h3>
      <h1>
        An Insider's Guide to NYFW
        </h1>
        <img src="https://s3.amazonaws.com/codecademy-content/courses/learn-html/elements-and-structure/image-one.jpeg" />
        <p><a href="https://en.wikipedia.org/wiki/New_York_Fashion_Week">NYFW</a> can be both amazingly fun & incredibly overwhelming, especially if you've never been. Luckily, I'm here to give you an insider's guide and make your first show a pleasurable experience. By taking my tips and tricks, and following your gut, you'll have an unforgettble experience!</p>
        <img src="https://s3.amazonaws.com/codecademy-content/courses/learn-html/elements-and-structure/image-two.jpeg" />
        <p>If you're lucky or connected you can get an invite, sans the price tag. But I wasn't so lucky or connected my first 2 years so I'm here to help you out. First, plan out which shows are most important to you and make a schedule and this is a biggie: SET A BUDGET. If you're worrying about blowing your cash the whole time you won't have fun. Then check out prices, days, and times and prioritize the designers you want to see most. Lastly, purchase your tickets and get exctied.</p>
        <h2>
          Dressing for the Shows
          </h2>
          <img src="https://s3.amazonaws.com/codecademy-content/courses/learn-html/elements-and-structure/image-three.jpeg" />
          <p>Always be true to your own sense of style, if you don't you'll be uncomfortable the whole time and it will show. Remeber, NYFW is about expressing yourself and taking in what the designers have chosen to express through their new lines. Also it's important to wear shoes you'll be comfortable all day. Obviously you want to look good, but you'll be on your feet all day long, so be prepared.</p>
          <h4>
Related Content
            </h4>
            <ul>
              <li>How To Style Boyfriend Jeans</li>
             <li> When PRint Is Too Much</li>
             <li> The Overalls Trend</li>
             <li> Fall's It Color: Blush</li>
              </ul>
              <div>
              
Project #2: The Box Model: Davie's Burgers
index.html
<!DOCTYPE html>
<html>
<head>
  <title>Davie JR's Menu</title>
  <link href="https://fonts.googleapis.com/css?family=Roboto:100,500,700|Oswald:300,400,700" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="reset.css">
  <link rel="stylesheet" type="text/css" href="style.css">
</head>

<body>

  <!-- Navigation Section -->

  <nav>
    
    <img src="https://s3.amazonaws.com/codecademy-content/courses/web-101/unit-6/htmlcss1-img_burger-logo.svg" />
    
    <span><a href="#">MENU</a></span>
    <span><a href="#">NUTRITION</a></span>
    <span><a href="#">ORDER</a></span>
    <span><a href="#">LOCATIONS</a></span>
  </nav>

  <!-- Content Section -->

  <div class="content">

    <!-- Content Header -->
    
    <div class="header">
      <h1>BBQ BACON BURGER</h1>
    </div>

    <!-- Content Body -->

    <div class="body">
      <p>
        Our BBQ Bacon Burger features our special house ground blend of wagyu and sirloin, spiced perfectly, and finished off with just a drop of white truffle oil. A butter grilled brioche bun layered with roasted red onion, perfectly crispy pork belly, and our hickory smoked BBQ sauce.
      </p>

      <!-- Order Button -->

      <a href="#" class="button">ORDER NOW</a>

      <!-- Nutrition Information -->
      
      <ul class="nutrition">
        <li>
          <span class="category">CALORIES</span>
          <span class="value">678</span>
        </li>
        <li>
          <span class="category">FAT</span>
          <span class="value">32</span>
        </li>
        <li>
          <span class="category">PROTEIN</span>
          <span class="value">8</span>
        </li>
        <li>
          <span class="category">CARBOHYDRATES</span>
          <span class="value">34</span>
        </li>
        <li>
          <span class="category">SODIUM</span>
          <span class="value">112</span>
        </li>
      </ul>
    </div>
  </div>
  
</body>
</html>
style.css
width: 68%;
  padding: 20px;
  margin: 0px auto;

}

/* Content Body */

.content .body {
  width: 90%;
  margin: 0px auto;
}

.body p {
  color: #333333;
  font-weight: 100;
  line-height: 34px;
  width: 90%;
  margin-top: 18px;
}

/* Content Button */

.button {
  border-radius: 4px;
  color: #05A8AA;
  display: block;
  font-weight: 700;
  width: 200px;
  padding: 20px;
  margin: 40px auto;
  border: 1px solid blue;

}

.button:hover {
  background-color: #05A8AA;
  border: 1px solid #05A8AA;
  color: #FFF;
}

/* Content Nutrition */

ul.nutrition {
  padding: 20px;

}

ul.nutrition li {
  display: inline-block;
  background-color: #05A8AA;
  list-style: none;
  width: 200px;
  padding: 10px 20px;
  margin-bottom: 3px;
}

.nutrition .category {
  color: white;
  font-weight: 100;
  letter-spacing: 2px;
  display: block;
}

.nutrition .value {
  color: white;
  font-size: 26px;
  font-weight: 700;
  letter-spacing: 2px;
}

              
                <p>
                  <strong>email:</strong>: isa@fashionblog.com | <strong>phone:</strong> 917-555-1098 | <strong>address:</strong> 371 284th St, New York, NY, 10001
                  </p>
                  </div>
      </body>

Project #3: Paint Store
index.html
<!DOCTYPE html>
<html>
<head>
  <title>House Store</title>
  <link rel="stylesheet" type="text/css" href="resources/css/reset.css">
  <link rel="stylesheet" type="text/css" href="resources/css/style.css">
  <link href="https://fonts.googleapis.com/css?family=Creepster" rel="stylesheet">
  <link href="https://fonts.googleapis.com/css?family=Open+Sans:400,700" rel="stylesheet">
</head>
<body>
  <!-- Header -->
  <header>
    <div class="image-container logo-small">
      <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/logo-sm.png">
    </div>
    <div class="image-container logo-big">
      <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/logo-lg.png">
    </div>
    <nav>
      <ul>
        <li><a href="#">Tools</a></li>
        <li><a href="#">Lumber</a></li>
        <li><a href="#">Paint</a></li>
        <li><a href="#">Garden</a></li>
        <li><a href="#">Contact</a></li>
      </ul>
    </nav>
  </header>

  <!-- Banner -->
  <div id="banner">
    <h1>PAINTING IS SCARY</h1>
    <p>But it doesn't have to be! Let our handy Virtual Paint Department help guide you through the process of choosing a color. Know the hue? You know what to do. Click the order button and we'll get the paint to you.</p>
  </div>

  <!-- Color Guide -->
  <div id="color-guide">
    <div class="introduction">
      <h2>Color Guide</h2>
      <p>Here at HouseStore, we take color seriously. In each of the following sections, well explore our base colors in swatches that incrementally change three values: <strong>Hue</strong>, <strong>Saturation</strong> and <strong>Lightness</strong>. You'll be able to pick from a wide variety of colors that all work well with each other because they <strong>stem from the same value.</strong></p>
    </div>

    <!-- Red Swatches -->
    <div class="color reds">
      <div class="information">
        <h3>Reds</h3>
        <p>Firetrucks, lipstick, fresh berries &mdash; red is a color with power, emotion, intensity. For this reason we recommend using reds as accent colors. Red is particularly suited to kitchens, as it is said to evoke hunger!</p><p>Our base red is <span class="base-color">HSL (350, 100, 50)</span></p>
        <div class="image-container">
          <img src="	https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/reds.png">
        </div>
      </div>
      <div class="swatches">
        <h4>Lightness</h4>
        <div class="swatch lightness">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Saturation</h4>
        <div class="swatch saturation">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Hue</h4>
        <div class="swatch hue">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
      </div>
    </div>

    <!-- Green Swatches -->
    <div class="color greens">
      <div class="information">
        <h3>Greens</h3>
        <p>They say that geniuses choose green &mdash; we think any of these verdant colors will look smart! Deck your halls like a lush outdoor space, adorn your rooms with emerald, or just make your houseguests green with envy!</p>
        <p>Our base green is <span class="base-color">HSL (130, 100, 50)</span></p>
        <div class="image-container">
          <img src="	https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/greens.png">
        </div>
      </div>
      <div class="swatches">
        <h4>Lightness</h4>
        <div class="swatch lightness">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Saturation</h4>
        <div class="swatch saturation">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Hue</h4>
        <div class="swatch hue">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
      </div>
    </div>

    <!-- Blue Swatches -->
    <div class="color blues">
      <div class="information">
        <h3>Blues</h3>
        <p>Blues dont give us the blues &mdash; in fact, blue is one of the most popular colors in home interiors, and for good reason! Energizing like a summer sky, calming like a lakeshore, light as mist or deep as indigo, blue can do it all.</p>
        <p>Our base blue is <span class="base-color">HSL (220, 100, 50)</span></p>
        <div class="image-container">
          <img src="	https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/blues.png">
        </div>
      </div>
      <div class="swatches">
        <h4>Lightness</h4>
        <div class="swatch lightness">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Saturation</h4>
        <div class="swatch saturation">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
        <h4>Hue</h4>
        <div class="swatch hue">
          <div class="color-1"></div>
          <div class="color-2"></div>
          <div class="color-3"></div>
          <div class="color-4"></div>
          <div class="color-5"></div>
        </div>
      </div>
    </div>
  </div>

  <!-- Footer -->
  <footer>
    <strong>All set? Click below to order.</strong>
    <p>Most colors can be delivered to your door within 48 hours. We'll reach out if your color needs some extra attention, which could delay shipment.</p>
    <a href="#" class="button">Order My Paint</a>
  </footer>
</body>
</html>
style.css
.color .swatch {
  display: flex;
  height: 6.6875rem;
  border: 10px solid #e6e6e6;
  margin-bottom: 1.25rem;
}

.color .swatch:last-child {
  margin-bottom: 0;
}

.color .swatch > div {
  flex-grow: 1;
  border-right: 10px solid #e6e6e6;
}

.color .swatch > div:last-child {
  border-right: 0;
}

@media only screen and (max-width: 820px) {
  #color-guide .color {
    flex-direction: column;
    align-items: center;
  }

  .color .information {
    width: 100%;
    margin-bottom: 3rem;
    align-items: center;
  }

  .color .information h3 {
    padding-bottom: 1.5rem;
  }

  .color .information p {
    margin-bottom: 2rem;
  }

  .color .swatches {
    width: 100%;
  }
}

/* Red Swatches */

.reds .base-color {
  color: hsl(350, 100%, 50%);
}

/* Red lightness decreases by 15 */
.reds .lightness .color-1 {
background-color: hsl(350, 100%, 80%);
}

.reds .lightness .color-2 {
  background-color: hsl(350, 100%, 65%);
}

.reds .lightness .color-3 {
  background-color: hsl(350, 100%, 50%);
}

.reds .lightness .color-4 {
  background-color: hsl(350, 100%, 35%);
}

.reds .lightness .color-5 {
  background-color: hsl(350, 100%, 20%);
}

/* Red saturation decreases by 15 */
.reds .saturation .color-1 {
background-color: hsl(350, 100%, 80%)
}

.reds .saturation .color-2 {
  background-color: hsl(350, 85%, 50%);
}

.reds .saturation .color-3 {
  background-color: hsl(350, 70%, 50%);
}

.reds .saturation .color-4 {
  background-color: hsl(350, 55%, 50%);
}

.reds .saturation .color-5 {
  background-color: hsl(350, 40%, 50%);
}

/* Red hue increases by 15 */
.reds .hue .color-1 {
background-color: hsl(320, 100%, 80%);
}

.reds .hue .color-2 {
  background-color: hsl(335, 100%, 50%);
}

.reds .hue .color-3 {
  background-color: hsl(350, 100%, 50%);
}

.reds .hue .color-4 {
  background-color: hsl(5, 100%, 50%);
}

.reds .hue .color-5 {
  background-color: hsl(20, 100%, 50%);
}

/* Green Swatches */

.greens .base-color {
  color: hsl(130, 100%, 50%);
}

/* Green lightness decreases by 20 */
.greens .lightness .color-1 {
background-color: hsl(103, 100%, 90%);
}

.greens .lightness .color-2 {
  background-color: hsl(103, 100%, 70%);
}

.greens .lightness .color-3 {
  background-color: hsl(103, 100%, 50%);
}

.greens .lightness .color-4 {
  background-color: hsl(103, 100%, 30%);
}

.greens .lightness .color-5 {
  background-color: hsl(104, 100%, 10%);
}

/* Green saturation decreases by 20 */
.greens .saturation .color-1 {
background-color: hsl(130, 100%, 50%);
}

.greens .saturation .color-2 {
  background-color: hsl(130, 80%, 50%);
}

.greens .saturation .color-3 {
  background-color: hsl(130, 60%, 50%);
}

.greens .saturation .color-4 {
  background-color: hsl(130, 40%, 50%);
}

.greens .saturation .color-5 {
  background-color: hsl(131, 20%, 50%);
}

/* Green hue increases by 22 */
.greens .hue .color-1 {
background-color: hsl(86, 100%, 50%);
}

.greens .hue .color-2 {
  background-color: hsl(108, 100%, 50%);
}

.greens .hue .color-3 {
  background-color: hsl(130, 100%, 50%);
}

.greens .hue .color-4 {
  background-color: hsl(152, 100%, 50%);
}

.greens .hue .color-5 {
  background-color: hsl(174, 100%, 50%);
}

/* Blue Swatches */

.blues .base-color {
  color: hsl(220, 100%, 50%);
}

/* Blue lightness decreases by 20 */
.blues .lightness .color-1 {
background-color: hsl(220, 100%, 90%);
}

.blues .lightness .color-2 {
  background-color: hsl(220, 100%, 70%);
}

.blues .lightness .color-3 {
  background-color: hsl(220, 100%, 50%);
}

.blues .lightness .color-4 {
  background-color: hsl(220, 100%, 30%);
}

.blues .lightness .color-5 {
  background-color: hsl(220, 100%, 10%);
}

/* Blue saturation decreases by 20 */
.blues .saturation .color-1 {
background-color: hsl(220, 100%, 50%);
}

.blues .saturation .color-2 {
  background-color: hsl(220, 80%, 50%);
}

.blues .saturation .color-3 {
  background-color: hsl(220, 60%, 50%);
}

.blues .saturation .color-4 {
  background-color: hsl(220, 40%, 50%);
}

.blues .saturation .color-5 {
  background-color: hsl(220, 20%, 50%);
}

/* Blue hue decreases by 20 */
.blues .hue .color-1 {
background-color: hsl(260, 100%, 50%);
}

.blues .hue .color-2 {
  background-color: hsl(240, 100%, 50%);
}

.blues .hue .color-3 {
  background-color: hsl(220, 100%, 50%);
}

.blues .hue .color-4 {
  background-color: hsl(200, 100%, 50%);
}

.blues .hue .color-5 {
  background-color: hsl(180, 100%, 50%);
}

/* Footer */

footer {
  position: relative;
  height: 30rem;
  padding: 7.8125rem 30% 0 30%;
  background: url("https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/footer.png") center center no-repeat;
  background-size: cover;
  text-align: center;
  font-size: 1.125rem;
  line-height: 1.4;
  color: white;
}

footer:before { /* Overlay */
  position: absolute;
  content: "";
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
background-color: rgba(0, 0, 0, 0.7);
}

footer * {
  position: relative; /* Makes elements display above overlay. */
}

footer strong {
  display: block;
  margin-bottom: 1.25rem;
  font-size: 2.25rem;
}

footer p {
  margin-bottom: 4.3125rem;
}

footer .button {
  padding: 1.25rem 3.75rem;
  border-radius: 4px;
  background-color: #ff8000;
}

@media only screen and (max-width: 560px) {
  footer {
    padding: 4.8125rem 15% 0 15%;
  }
}

Project #4: Typography
index.html
<!DOCTYPE html>
<html>
<head>
  <title>Morocco</title>
  <link href="https://fonts.googleapis.com/css2?family=Abril+Fatface&family=Merriweather:ital@0;1&family=Work+Sans:wght@400;500;800&display=swap" rel="stylesheet">
  <link rel="stylesheet" type="text/css" href="styles/reset.css">
  <link rel="stylesheet" type="text/css" href="styles/style.css">
</head>
<body>
  <!-- Header -->
  <nav class="header">
    <span class="logo">AOFIE CONLEAVY</span>
    <ul>
      <li><a href="#">TRAVELS</a></li>
      <li><a href="#">FICTION</a></li>
      <li><a href="#">CONTACT</a></li>
    </ul>
  </nav>

  <!-- Banner -->
  <div class="banner">
    <h2>DEC 20XX</h2>
    <h1>Morocco</h1>
  </div>

  <!-- Journal -->
  <div class="journal">
    <div class="first photo">
      <div class="image-container">
        <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/project-morocco/photo1.png">
      </div>
      <span class="caption">A convoy of camels criss-crossing the crests of the Sahara</span>
    </div>
    <p>
      <span class="first-letter">I</span> am in the Great Sahara Desert for the third sundown in a row. Fouad and I pass back and forth a sun-bleached map of the stars. It’s more of a tug-of-war to be honest. With what remains of the daylight, we commit to memory the positions of spots on the page. We hope to find some correlation in its negative, which slides overhead as the sun rapidly dies.
    </p>
    <p>
      "Navigating by night is always easier." Fouad flicks these English words as ash from a cigarette. "You’ll see."
    </p>
    <p>
      "We won't see anything. That's my point!"
    </p>
    <p>
      How did we get here?
    </p>
    <p>
      It started eight days ago when I arrived in Malilla on the boat from Malaga. The sun hit me like a judgement as I stepped onto the gangplank. A bit about Morocco:  
    </p>
    <div class="photo">
      <div class="image-container">
        <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/project-morocco/photo2.png">
      </div>
      <span class="caption">The long and winding road to Merrakec</span>
    </div>
    <p>
      Morocco has a population of over 33.8 million and an area of 446,550 km2 (172,410 sq mi). Its capital is Rabat, and the largest city is Casablanca. Other major cities include Marrakesh, Tangier, Tetouan, Sale, Fes, Agadir, Meknes, Oujda, Kenitra, and Nador. A historically prominent regional power, Morocco has a history of independence not shared by its neighbours.
    </p>
    <span class="quote">"Navigating by night is always easier."</span>
    <p>
      Since the foundation of the first Moroccan state by Idris I in 789, the country has been ruled by a series of independent dynasties, reaching its zenith under the Almoravid and Almohad dynasty, spanning parts of Iberia and Northwestern Africa. Marinid and Saadi dynasties continued the struggle against foreign domination, and Morocco remained the only North-African country to avoid Ottoman occupation. 
    </p>
    <p>
      The Alaouite dynasty, the current ruling dynasty, seized power in 1666. In 1912 Morocco was be divided into a French and Spanish protectorates, with an international zone in Tangier, and regained its independence in 1956. Moroccan culture is a blend of Arab, indigenous Berber, Sub-Saharan African, and European influences.
    </p>
    <div class="photo">
      <div class="image-container">
        <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/project-morocco/photo3.png">
      </div>
      <span class="caption">A stall at the Jemaa El Fnaa street market</span>
    </div>
    <p>
      Morocco claims the non-self-governing territory of Western Sahara as its Southern Provinces. Morocco annexed the territory in 1975, leading to a guerrilla war with indigenous forces until a cease-fire in 1991. Peace processes have thus far failed to break the political deadlock.
    </p>
    <p>
      Morocco is a constitutional monarchy with an elected parliament. The King of Morocco holds vast executive and legislative powers, especially over the military, foreign policy and religious affairs. Executive power is exercised by the government, while legislative power is vested in both the government and the two chambers of parliament, the Assembly of Representatives and the Assembly of Councillors. The king can issue decrees called dahirs which have the force of law. He can also dissolve the parliament after consulting the Prime Minister and the president of the Constitutional court.
    </p>
    <span class="quote">“Navigating by night is always easier.”</span>
    <p>
      Morocco's predominant religion is Islam, and the official languages are Arabic and Tamazight. Moroccan dialect, referred to as Darija, and French are also widely spoken. Morocco is an influential member of the Arab League and a part of the Union for the Mediterranean. It has the fifth largest economy of Africa.
    </p>
    <div class="photo">
      <div class="image-container">
        <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/project-morocco/photo4.png">
      </div>
      <span class="caption">The desert at night is strange and beautiful</span>
    </div>
  </div>

  <!-- Footer -->
  <footer>
    <div class="image-container">
      <img src="https://s3.amazonaws.com/codecademy-content/courses/freelance-1/unit-6/project-morocco/author.png">
    </div>
    <div class="content">
      <p>
        <span class="author">Aoife Donleavy</span> has been writing on her travels for over two decades.
        After graduating from the <em>Idaho Writers' Workshop</em>, she piloted a biplane on a two-year voyage from <em>Anchorage</em>, <em>Alaska</em> to <em>Isafjorour</em>, <em>Iceland</em> stopping along the way for adventures throughout Europe.
      </p>
      <p>
        Since then, she has camped on all seven continents, and has been recognized worldwide for her spare, ageless prose. Aoife's new novel, <em>Tide Blade</em>, is currently available from <em>Walrus Publishing</em>. 
      </p>
    </div>
  </footer>
</body>
</html>
style.css
}

/* Footer */

footer {
  display: flex;
  align-items: center;
  padding: 0 1%;
  background-color: #212121;
  font-family: "Croissant One","Merriweather", serif;
}

footer .image-container {
  width: 400px;
}

footer .content {
  flex-grow: 1;
  font-style: italic;
  color: #9b9b9b;
  line-height: 1.5;
}

footer p {
  padding-bottom: 1.66rem;
}

footer p:last-child {
  padding-bottom: 0;
}

footer .author {
  color: #ffb78c;
}

footer em {
  color: #cfcfcf;
}

@media only screen and (max-width: 750px) {
  footer {
    flex-direction: column;
    padding: 0 10% 2rem 10%;
  }

  footer .image-container {
    height: 300px;
    margin-bottom: 2rem;
    overflow: hidden;
  }
}

Project #5: X-Press Publishing
server.js
const apiRouter = require('./api/api');

const app = express();
const PORT = process.env.PORT || 4000;

app.use(bodyparser.json());
app.use(cors());
app.use(morgan('dev'));

app.use(''apiRouter, apiRouter);
app.use(errorhandler());


app.listen(PORT, () => {
    console.log(`Listening on port: ${PORT}`);
})

module.exports = app;

artists.js
const express = require('express');
const artistsRouter = express.Router();

const sqlite3 = require('sqlite3');
const db = new sqlite3.Database(process.env.TEST_DATABASE || './database.sqlite');

artistsRouter.param('artistID', (req, res, next, artistID) => {
    const sql = 'SELECT * FROM Artist WHERE Artist.id = $artistID';
    const values = {$artistId: artistId}
    db.get(sql, values, (error, artist) => {
        if (error) {
            next(error);

        } else if (artist) {
            req.artist = artist;
            next();
        } else {
            res.sendStatus(404);
        }
    })
} );
artistsRouter.get('/', (req, res, next) => {
db.all('SELECT * FROM Artist WHERE Artist is_currently_employed = 1',)
( err, artists) => {
if (err) {
    next(err);
} else {
    res.status(200).json({artists: artists})
}

});
});
artistsRouter.get('/:artistId', (req, res, next) => {
res.status(200).json{artist: req.artist});    
})

artistsRouter.post('/', (req, res, next) => {
const name = req.body.artist.name;
const dateOfBorth = req.body.artist.dateOfBirth;
const biogrqphy = req.body.artist.biography;
const isCurrentlyEmplyed = req.body.artist.isCurrentlyEmployed === 0 ? 0 : 1;
if (!name || !DateOfBirth || !biography) {
    return res.sendStatus(400);
}

const sql = 'INSERT INTO Artist (name, date_of_birth, biography, is_currently_employed)  ' +
'VALUES ($name, $dateOfBirth, $biography, $isCurrentlyEmployed)';
const values = {
    $name: name,
    $dateOfBirth: dateOfBirth,
    $biography: biography,
    $isCurrenlyEmployed: isCurrentlyEmployed
};
db.run(sql, values, function(error) {
    if(error) {
        next(error);
    } else {
        db.get (`SELECT * FROM Artist WHERE Artist.id = ${this.lastID}`)
        (error, artist) => {
            res.status(201).json({artist: artist});
        }
    }
})
});
artistsRouter.put('/:artistId', (req, res, next) => {
    const name = req.body.artist.name;
const dateOfBorth = req.body.artist.dateOfBirth;
const biogrqphy = req.body.artist.biography;
const isCurrentlyEmplyed = req.body.artist.isCurrentlyEmployed === 0 ? 0 : 1;
if (!name || !DateOfBirth || !biography) {
    return res.sendStatus(400);
}

const sql = 'UPDATE Artist SET namr = $name, date_of_birth = $dateOfBirth,  ' +
'biography = $biography, is_currently_employed = $isCurrentlyEmployed'  ' + '
'WHERE Artist.id = $artistId';
const values = {
    $name: name,
    $dateOfBirth: dateOfBirth,
    $biography: biography,
    $isCurrentlyEmployed: isCurrentlyEmployed,
    $artistId: req.params.artistId
};

db.run(sql, values, (error) => {
    if (error){
        next(error);

    } else {
        db.get(`SELECT * FROM Artist WHERE Artist.id = ${req.params.artistId}`),
        (error, artist) => {
            res.status(200).json({artist: artist});
        }
    }
});
});
artistsRouter.delete('/:artistId', (req, res, next) => {
    const sql = 'UPDATE Artist SET is_currently_employed = 0 WHERE Artist.id = $artistId';
    const values = {$artistId: req.params.artistId};

    db.run(sql, values, (error) =>{
        next(error); {
            else {
                db.get(`SELECT * FROM Artist.id = ${req.params.artistId}`,
                (error, artist) => {
                    res.status(200).json{artist: artist});
                });
            }
        }

    })
})
module.exports = artistsRouter;

migration.js
const sqlite3 = require('sqlite3');
const db = new sqlite3.Database('./database.sqlite');

db.serialze(function() {
    db.run('CREATE TABLE IF NOT EXISTS `Artist`  ('  '  +
    '`id` INTEGER NOT NULL  ' + 
    '`name` TEXT NOT NULL, ' +
    '`date_of_birth` TEXT NOT NULL, ' +
    '`biography` TEXT NOT NULL, ' +
    '   is_currently_employed` INTEGER NOT NULL DEFAULT 1, ' +
    'PRIMARY KEY('id')  )'  );
    db.run('CREATE TABLE IF NOT EXISTS 'Series' (  ') +
    '`id` INTEGER NOT NULL,  ' +
    '`name` TEXT NOT NULL,  ' +
    '`description`' TEXT NOT NULL, ' +
    '`PRIMARY KEY(`id)';

    db.run('CREATE TABLE IF NOT EXISTS `Issue`  (  ' +
    '`id` INTEGER NOT NULL,  ' +
    '`name` TEXT NOT NULL,  ' +
    '`issue_number` INTEGER NOT NULL,  ' +
    '`publication_date` TEXT NOT NULL,  '  +
    '`artist_id` INTEGER NOT NULL,  '  +
    '`series_id` INTEGER NOT NULL,  '  +
    'PRIMARY KEY(`id), ' +
    'FOREIGN KEY (`artist_id) REFERENCES 'Artist'(`id`),  ' +
    'FOREIGN KEY (`series_id) REFERENCES `Series`'(`id`) )

    )
    )
)
})

issues.js
const express = require('express');
const issuesRouter = express.Router({mergeParams: true});

const sqlite3 = require('sqlite3');
const db = new sqlite3.Database(process.env.TEST_DATABASE || './database.sqlite');

issuesRouter.param('issueId', (req, res, next, issueId) => {
const sql = 'SELECT' * FROM Issue WHERE Issue.id = $issueId;
const values = {$issueId: issueId};
db.get(sql, values, (error, issue) => {
    if (error) {
        next(error);

    }else if(issue) {
        next();

    } else {
        res.sendStatus(400)
    }
})
});

issuesRouter.get('/', (req, res, next) =>{
    const sql = 'SELECT * FROM Issue WHERE Issue.series_id = $seriesId';
    const values = { $seriesId: req.params.seriesId};
    db.all(sql, values, (error, issues) => {
        next(error);
    
    }else {
        res.status(200).json({issues: issues});
    }
});
issuesRouter.post{'/', req, res, next} => {
    const name = req.body.issue.name;
    const issueNumber =  req.body.issue.issueNumber;
    const publicationDate = req.body.issue. publicationDate;
    const ArtistId = req.body.issue. artistId;
    const artistSql = 'SELECT * FROM Artist WHERE Artist.id = $artistId';
    const artistValues = {$artistId: artistId};
    db.get(artistSql, artistValues, (error, artist) => {
        if (error {
            next(error);
        } else {
           (!name || !issueNumber || !publicationDate || !artist) {
               return res.sendStatus(400);
           } 
           const sql = 'INSER INTO Issue (name, issue_number, publication_date, artist_id, series_id)  '  +
           'VALUES ($name, $issueNumber, $publicationDate, $artistId, $seriesId)';
           const values = {
               $name: name,
               $issueNumber: $issueNumber,
               $publicationDate: $publicationDate,
               $artistId: artistId,
               $seriesId: req.params.seriesId
           };
           db.run(sql, values, function(error) {
if(error {
    next(error) {

    }else {
        db.get(`SELECT * FROM Issue WHERE Issue.id = ${this.lastID}`,
        (error, issue) => {
            res.status(201).json({issue: issue});
        });
    }
})
           })
        }
        })
    })
}
issuesRouter.put('issueId', (req, res, next) => {
    const name = req.body.issue.name;
    const issueNumber =  req.body.issue.issueNumber;
    const publicationDate = req.body.issue. publicationDate;
    const ArtistId = req.body.issue. artistId;
    const artistSql = 'SELECT * FROM Artist WHERE Artist.id = $artistId';
    const artistValues = {$artistId: artistId};
    db.get(artistSql, artistValues, (error, artist) => {
        if (error) {
            next(error); {

            }else {
                if (!name || !issueNumber || !publicationDate || !artist) {
                    return res.sendStatus(400);
                }
                const sql = 'UPDATE Issue SET name = $name, issue_number = $issueNumber, ' +
                'publication_date = $publicationDate, artist_id = $artistId' +
                'WHERE Issue.id = $issueId';
                const values = {
                    $name: name,
                    $issueNumber: issueNumber,
                    $publicationDate: publicationDate,
                    $artistId: artistId,
                    $issueId: req.params.issueId;
                };
                db.run(sql, values, function(error) {
                    if (error) {
                        next(error);

                    } else {
                        db.get(`SELECT * FROM Issue WHERE Issue.id = {req.params.issueId}`),
                        (error, issue) => {
                            res.status(200).json({issue: issue});
                        }
                    }
                })
            }

        }
    })
});
issuesRouter.delete('/: issueId', (req, res, next) => {
    const sql = 'DELETE FROM Issue WHERE Issue.id = $issueId'
    const value = {issueId: req.params.issueId};

    db.run(sql, value, (error) => {
        if (error) {
            next(error);

        } else {
            res.sendStatus(204);
        }
    })
})
module.exports = issuesRouter;

series.js
const express = require('express');
const seriesRouter = express.Router();

const sqlite3 = require('sqlite3');
const db = new sqlite3.Database(process.env.TEST_DATABASE || './database.sqlite');

const issuesRouter = require('./issues.js');
seriesRouter.param('seriesId', (req, res, next, seriesId) => {
    const sql = 'SELECT * FROM Series WHERE Series.id = $seriesId';
    const values = {seriesId: seriesId};
    db.get(sql, values, (error, series) => {
        if (error) {
            next(error) {
                next(error);

            } else if (series) {
                req.series = series;
                next();

            } else {
                res.sendStatus(404);
            }
        }
    })
})

seriesRouter.use('/:seriesId/issues', issuesRouter);
seriesRouter.get('/', (req, res, next) => {
    db.all('SELECT * FROM Series', (err, series) => {
        if(err) {
            next(err);

        }else {
            res.status(200).json{series: series});
        }
    }
    )
});
seriesRouter.get('/:seriesId', (req, res, next) => {
    res.status(200).json({series: req.series});
});

seriesRouter.post('/', req, res, next) => {
    const name = req.body.series.name;
    const description = req.body.series.description;
    if (!name || !description) {
        return res.sendStatus(400);
    }
    const sql = 'INSERT INTO SERIES (name, description) VALUES ($name, $description)';
    const values = {
        $name: name,
        $description: description
        $seriesId: req.params.seriesId

    };

    db.run(sql, values, function(error) {
        if (error) {
            next(error);

        } else {
            db.get(`SELECT * FROM Series WHERE Series.id = ${req.params.seriesId}`),
            (error, series) => {
                res.status(200).json({series: series});
            }

            }
        }
    })
}
seriesRouter.delete('/:seriesId', (req, res, next) => {
    const issueSql = 'SELECT * FROM Issue WHERE Issue.series_id = $seriesId';
    const issueValues = {$seriesId: req.params.seriesId};
    db.get(issueSql, issueValues, (error, issue) => {
        if (error) {
            next(error);
        } else if (issue) {
            res.sendStatus(400);

        } else {
            const deleteSql = 'DELETE FROM Series WHERE Series.id = $seriesId';
            const deleteValues = {$seriesId: req.params.seriesId};

            db.run(deleteSql, deleteValues, (error) => {
                if (error) {
                    next(error);

                } else {
                    res.sendStatus(204);
                }
            });
        }
    })
})
module.exports = seriesRouter;

api.js
const express = require('express');
const apiRouter = express.Router();
const artistRouter = require('./artists.js');
const seriesRouter = require('/series.js');

apiRouter.use('/artist, artistRouter);
apiRouter.use('/series', seriesRouter);

module.exports = apiRouter;
